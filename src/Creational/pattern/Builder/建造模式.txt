                              建造(Builder)模式

建造模式是对象的创建模式。建造模式可以将一个产品的内部表象和产品的生成过程分割开来，从而可以使一个建造过程生成具有不同内部表象的产品对象。


产品的内部表象

一个产品常有不同的组成成分作为产品的零件，这些零件有可能是对象，也有可能不是对象，它们又叫做产品的内部表象。 不同的产品可以有不同的内部表象，也就是不同的零件。
使用建造模式可以使客户端不需要知道所生成的产品对象有哪些零件，每个产品的对应零件彼此有何不同，是怎么建造出来的，以及怎样组成产品。


对象性质的建造

某些情况下，一个对象会有一些重要的性质，在它们没有恰当的值之前，对象不能作为一个完整的产品使用。比如一个电子邮件的收件人发件人属性在没有赋值之前是不能发出的。
另一些情况下，一个对象的一些性质必须按照某个顺序赋值才有意义。在某个性质没有赋值之前，另一个性质则无法赋值。这些情况使得性质本身的建造涉及到复杂的商业逻辑。
这时候，此对象相当于一个有待建造的产品，而对象的这些性质相当于产品的零件，建造产品的过程是建造零件的过程。
由于建造零件的过程很复杂，因此，这些零件的建造过程往往被外部化到另一个称作建造者的对象里，建造者对象返还给客户端的是一个全部零件都建造完毕的产品对象。


建造模式非常适用于此种情况。它利用一个导演者对象和具体建造者对象一个一个的建造出所有的零件，从而建造出完整的产品对象。
建造者模式将产品的结构和产品的零件建造过程对客户端隐藏起来，把对建造过程进行指挥的责任和具体建造零件的责任分割开来，达到责任划分和封装的目的。


建造模式涉及到抽象建造者角色(Builder)、具体建造者角色(ConcreteBuilder)、导演者角色(Director)、产品角色(Product)这四个角色。


在以下情况下应当使用建造模式：
1，需要生成的产品对象有复杂的内部结构。
每一个内部成分本身可以是对象，也可以仅仅是一个对象(即产品对象)的一个组成部分。
2，需要生成的产品对象的属性相互依赖。
建造模式可以强制实行一种分步骤进行的建造过程，因此，如果产品对象的一个属性必须在另一个属性被赋值之后才可以被赋值，使用建造模式便是一个很好的设计思想。
有时产品对象的属性并无彼此依赖的关系，但是在产品的属性没有确定之前，产品对象不能使用。这时产品对象的实例化，属性的赋值和使用仍然是分步骤进行。因此建造模式仍然有意义。
3，在对象创建过程中会使用到系统中的其他一些对象，这些对象在产品对象的创建过程中不易得到。

同时，使用建造模式主要有以下的效果：
1，建造模式的使用使得产品的内部表象可以独立的变化，可以使客户端不必知道产品内部组成的细节。
2，每一个Builder都相对独立，而与其他的Builder无关。
3，模式所建造的最终产品更易于控制。


JDK里的应用：

java.lang.StringBuilder#append()
java.lang.StringBuffer#append()
java.sql.PreparedStatement
javax.swing.GroupLayout.Group#addComponent()