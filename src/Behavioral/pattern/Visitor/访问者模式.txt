                                       访问者(Visitor)模式

访问者模式属于对象的行为模式。它的目的是封装一些施加于某种数据结构元素之上的操作。一旦这些操作需要修改的话，接受这个操作的数据结构则可以保持不变。

访问者模式适用于数据结构相对稳定的系统，它把数据结构和作用于结构上的操作之间的耦合解脱开，使得操作集合可以相对自由的演化。
数据结构的每一个节点都可以接受一个访问者的调用，此节点向访问者对象传入节点对象，而访问者对象则反过来执行节点对象的操作。
这样的过程叫做“双重分派”。节点调用访问者，将它自己传入，访问者则将某算法针对此节点执行。

访问者模式涉及到的角色：
抽象访问者(Visitor)角色、具体访问者(ConcreteVisitor)角色、抽象节点(Node)角色、具体节点(ConcreteNode)角色、结构对象(ObjectStructure)角色。


访问者模式的适用性

访问者模式应当在被访问的类结构非常稳定的情况下使用。换言之，系统很少出线需要加入新节点的情况。
如果出现需要加入新节点的情况，那就必须在每一个访问者对象中加入一个对应于这个新节点的访问操作(也就是在访问者接口中增加一个新方法)，而这是对系统的大规模修改。
访问者模式允许在节点中加入新的方法，相应的仅仅需要在一个新的访问者类中加入此方法(如果访问者类确实需要调用此方法)，而不需要在每一个访问者类中都加入此方法。
显然，访问者模式提供了倾斜的可扩展性设计：方法集合的可扩展性和类集合的不可扩展性。


访问者模式的优点
1，它使得增加新的操作变得很容易。
如果一些操作依赖于一个复杂的结构对象的话，那么一般而言，增加新的操作会很复杂。而使用访问者模式，增加新的操作意味着增加一个新的访问者类，因此比较容易。
2，它将有关的行为集中到一个访问者对象中，而不是分散到一个个的节点类中。
3，它可以跨过几个类等级结构访问属于不同类等级结构的成员类(因为这些互不相关的类都要实现可被访问接口，即声明accept()方法的接口)。
迭代子只能访问属于同一类等级结构的成员对象，而不能访问属于不同类等级结构的对象。
4，积累状态。
每一个单独的访问者对象都集中了相关的行为，从而也就可以在访问的过程中将执行操作的状态积累在自己内部，而不是分散到很多节点对象中。这是有益于系统维护的优点。


访问者模式的缺点
1，增加新的节点类变得很困难。
每增加一个新的节点都意味着要在抽象访问者角色中增加一个新的抽象操作，并在每一个具体访问者类中增加相应的具体操作。
2，破坏封装。
访问者模式要求访问者对象访问并调用每一个节点对象的操作，这隐含了一个对所有节点对象的要求：它们必须暴露一些自己的操作和内部状态。
不然，访问者的访问就变得没有意义。由于访问者对象自己会积累访问操作所需的状态，从而使这些状态不再存储在节点对象中，这也是破坏封装的。

由于明显的缺点，访问者模式成为了一个有争议的设计模式。

JDK里的应用：

javax.lang.model.element.Element 和javax.lang.model.element.ElementVisitor
javax.lang.model.type.TypeMirror 和javax.lang.model.type.TypeVisitor
