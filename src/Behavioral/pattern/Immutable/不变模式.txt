                                                         不变(Immutable)模式

一个对象的状态在对象被创建之后就不再变化，这就是所谓的不变模式。
一般地讲，一个对象要么是可变(Mutable)对象，要么是不变(Immutable)对象。一个可变对象的状态可以改变，而一个不变对象的状态不可改变。

不变模式可增强对象的强壮性，它允许多个对象共享某一对象，降低了对该对象进行并发访问时的同步化开销。
如果需要修改一个不变对象的状态，那么就需要建立一个新的同类型对象，并在创建时将这个新的状态存储在新对象里。
不变模式只涉及到一个类，一个类的内部状态创建后，在整个生命期间都不会发生变化时，这样的类称作不变类。
这种使用不变类的做法就做不变模式，不变模式不需要类图描述。

不变模式有两种形式：一种是弱不变模式，一种是强不变模式。

弱不变模式

一个类的实例的状态是不可变化的；但是这个类的子类的实例具有可能会变化的状态。这样的类符合弱不变模式的定义。

强不变模式

一个类的实例的状态不会改变；同时它的子类的实例也具有不可变化的状态。这样的类符合强不变模式。
要实现强不变模式，一个类必须首先满足弱不变模式所要求的所有条件，并且还要满足下面条件之一：
1，类的所有的方法都应当是final；这样这个类的子类不能置换掉此类的方法。
2，这个类本身就是final的，那么它就不可能会有子类，从而也就不可能有被子类修改的问题。


不变和只读的区别

不变(Immutable)与只读(Read-Only)是不同的。当一个变量是只读时，变量的值不能直接改变，但是可以在其他变量发生改变的时候改变。
比如一个人的出生日期是不变属性，而一个人的年龄便是只读属性，但不是不变属性，因为它会随着时间而变化，而出生日期是不会变的。


不变模式的优点
1，因为不能修改一个不变对象的状态，所以可以避免由此引起的不必要的程序错误；换言之，一个不变的对象要比可变的对象更加容易维护。
2，因为没有任何一个线程能够修改不变对象的内部状态，一个不变对象自动就是线程安全的，这样就可以节省掉处理同步化的开销(方法无需设为synchronized)。

不变模式的缺点
一旦需要修改一个不变对象的状态，就只好创建一个新的同类对象。在需要频繁修改不变对象的环境里，会有大量的不变对象作为中间结果被创建出来，这是一种资源上的浪费。


适用性
在设计任何一个类的时候，应当慎重考虑其状态是否有需要变化的可能性。除非其状态有变化的必要，不然应当将它设计成不变类。


JDK中的不变类有String、Integer、Float、Double、Byte、Long、Short、Boolean、Character等。
