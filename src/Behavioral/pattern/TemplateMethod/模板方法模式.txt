                                                                                                   模板方法(Template Method)模式

模板方法模式是类的行为模式。
准备一个抽象类，将部分逻辑以具体方法以及具体构造子的形式实现，然后声明一些抽象方法来迫使子类实现剩余的逻辑。
不同的子类可以以不同的方式实现这些抽象方法，从而对剩余的逻辑有不同的实现。这就是模板方法模式的用意。

模板方法模式是基于继承的代码复用的基本技术，它的结构和用法也是面向对象设计的核心。
模板方法模式需要开发抽象类和具体子类的设计师之间的协作。
一个设计师负责给出一个算法的轮廓和骨架，另一些设计师则负责给出这个算法的各个逻辑步骤。
代表这些具体逻辑步骤的方法称作基本方法(primitive method)；而将这些基本方法汇总起来的方法叫做模板方法(template method)。
模板方法所代表的行为称为顶级行为，其逻辑称为顶级逻辑。

模板方法模式涉及到两个角色：抽象模板(Abstract Template)角色、具体模板(Concrete Template)角色。


好莱坞原则

子类可以置换掉父类的可变部分，但是子类却不可以改变模板方法所代表的顶级逻辑。
每当定义一个新的子类时，不要按照控制流程的思路去想，而应当按照"责任"的思路去想。
换言之，应当考虑有哪些操作是必须置换掉的，哪些操作是可以置换掉的，以及哪些操作是不可以置换掉的。
使用模版方法模式可以使这些责任变得更清晰。


再论继承

对数据的抽象化、继承、封装和多态并称Java和其他绝大多数的面向对象语言的几项最重要的特性。
继承不应当被滥用，并不意味着继承根本就不应该使用。
继承使得类型的等级结构易于理解、维护和扩展，而类型的等级结构非常适合于抽象化的设计、实现和复用。
尽管GOF的设计模式基本上没有太多基于继承的模式，很多模式都是用继承的办法定义、实现接口的。
模板方法模式则更进了一步：此模式鼓励恰当的使用继承。
它可以用来改写一些拥有相同功能的相关的类，将可复用的一般性的行为代码转移到基类里面，而把特殊化的行为代码移到子类里面。


模板方法模式中的方法

模板方法模式中的方法可以分为两大类：
1，模板方法(Template Method)
一个模板方法是定义在抽象类中的，把基本操作方法组合在一起形成一个总算法或一个总行为的方法。
这个模板方法一般会在抽象类中定义，并由子类不加以修改的完全继承下来。
一个抽象类可以有任意多个模板方法，而不限于一个。每一个模板方法都可以调用任意多个具体方法。
2，基本方法(Primitive Method)
基本方法又可以分为三种：
抽象方法(Abstract Method)
一个抽象方法由抽象类声明，由具体子类实现。
具体方法(Concrete Method)
一个具体方法由抽象类声明并实现，而子类并不实现或替换。
钩子方法(Hook Method)
一个钩子方法由抽象类声明并实现，而子类会加以扩展。
通常抽象类给出的实现是一个空实现，作为方法的默认实现。钩子方法的名字应当以do开始，这是普遍的标准做法。

决定哪一个方法应作为具体方法是一个较为简单的任务，而决定哪一个方法作为抽象方法而不是钩子方法，
或者应作为钩子方法而不是抽象方法，则常常不是一个容易的任务。
模板方法模式的设计理念是尽量减少必须由子类置换掉(override)的基本方法的数目。


在对一个继承的等级结构做重构时，一个应当遵从的原则是将行为尽量移动到结构的高端，而将状态尽量移动到结构的低端。
下面是一些原则：
1，应当根据行为而不是状态定义一个类。
也就是说，一个类的实现首先建立在行为的基础之上，而不是建立在状态的基础之上。
2，在实现行为时，是用抽象状态而不是用具体状态。
如果一个行为涉及到对象的状态时，使用间接的引用而不是直接的引用。
换言之，应当使用取值方法而不是直接引用属性。
3，给操作划分层次。
一个类的行为应当放到一个小组核心方法里面，这些方法可以很方便地在子类中加以置换。
4，将状态属性的确认推迟到子类中。
不要在抽象类中过早地声明属性变量，应将它们尽量地推迟到子类中去声明。
在抽象超类中，如果需要状态属性的话，可以调用抽象的取值方法，而将抽象的取值方法的实现放到具体子类中。
如果能够遵从这样的原则，那么就可以在等级结构中将接口与实现分隔开来，将抽象与具体分割开来，从而保证代码可以最大限度地被复用。