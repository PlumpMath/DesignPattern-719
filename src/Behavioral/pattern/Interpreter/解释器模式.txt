                                                                          解释器(Interpreter)模式

解释器模式是类的行为模式。
给定一个语言之后，解释器模式可以定义出其文法的一种表示，并同时提供一个解释器。
客户端可以使用这个解释器来解释这个语言中的句子。


背景

如果某一类问题一再发生的话，那么一个有意义的做法就是将此类问题的各个实例表达为一个简单语言中的句子。
这样就可以建造一个解释器，通过解释这些语句达到解决问题的目的。
例如，依照一个匹配模式搜寻字符串便是一个常见的问题。
与其为每一个匹配模式建造一个特定的算法，不如建造一个一般性的算法处理各种常规表达式。
当接到一个指定的常规表达式时，系统使用一个解释器解释这个常规表达式，从而对字符串进行匹配。

解释器模式只描述解释器是怎样工作的，并不指明怎样在运行时创建新的解释器。
虽然广义地讲，解释器不一定要有一个浏览器(parser)，但是使用浏览器仍然是最常见的建立解释器的办法。
一个浏览器可以从一个文件或命令行读入文字性命令，并创建解释器。

浏览器是一种能够识别文字并将文字按照一定规则进行分解以便进一步处理的对象。
浏览器能够识别的字符串叫做语言。所谓文法，便是决定怎样将语言的元素组合起来的规则的集合。浏览器便是根据组合规则将字符串分解的。

抽象的讲，语言并不一定是以字符串的形式表达的。
在解释器模式里面所提到的语言是指任何解释器对象能够解释的任何组合。
在解释器模式中，需要定义一个代表文法的命名类的等级结构，也就是一系列的组合规则；
每一个命令对象都有一个解释方法，代表对命令对象的解释。

命令对象的等级结构中的对象的任何排列组合都是一个语言，而浏览器的工作便是将一个文字性语言翻译成等效的解释器语言。

解释器模式所涉及到的角色有：
抽象表达式(Expression)角色、终结符表达式(Terminal Expression)角色、非终结符表达式(Nonterminal Expression)角色、客户端(Client)角色、环境(Context)角色。


解释器模式适用于以下的情况：
1，系统有一个简单的语言可供解释。
2，一些重复发生的问题可以用这种简单的语言表达。


JDK里的应用：

java.util.Pattern
java.text.Normalizer
java.text.Format
3，效率不是主要的考虑。