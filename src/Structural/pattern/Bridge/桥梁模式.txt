                                                                 桥梁(Bridge)模式

桥梁模式的用意是将抽象化部分(Abstraction)与实现化部分(Implementation)解耦，使它们都可以独立的演化。
桥梁模式中的所谓解耦，就是指在一个软件系统的抽象部分和实现部分之间使用组合/聚合关系而不是继承关系，从而使两者可以相对独立的变化。

继承关系的缺点是灵活性不够。继承是一种强耦合，它在一开始便把抽象角色和实现角色的关系绑定，使得两个层次之间相互限制，无法独立地演化。
那么能否使用一种弱耦合来实现抽象角色层和实现角色层关系的动态绑定呢？桥梁模式就提供了这样一种用聚合关系实现的弱耦合解决方案。


桥梁模式是对象的结构模式，又称为柄体(Handle and Body)模式：抽象角色就像是一个水杯的手柄，而实现角色就像是水杯的杯身。手柄控制杯身，这就是“柄体”的来源。
抽象化等级结构中的商业方法通过向对应的实现化对象的委派实现自己的功能，这意味着抽象化角色可以通过向不同的实现化对象委派，来达到动态地转换自己的功能的目的。


对变化的封装

找到系统的可变因素，将之封装起来，通常就叫做对变化的封装。对变化的封装实际上是达到开闭原则的途径，与组合/聚合复用原则是相辅相成的。
一个继承关系不应当同时处理两个变化因素，换言之，这种简单实现不能够处理抽象化与实现化都面临变化的情况。
所以需要把它们都分别封装起来，形成两个继承关系，并且用组合/聚合进行动态灵活组装。


在以下的情况下应当使用桥梁模式：
1，如果一个系统需要在构件的抽象化角色和实现化角色之间增加更多的灵活性，避免在两个层次之间建立静态的联系。
2，设计要求实现化角色的任何改变不应当影响客户端，或者说实现化角色的改变对客户端是完全透明的。
3，一个构件有多于一个的抽象化角色和实现化角色，系统需要它们之间进行动态耦合。
4，虽然在系统中使用继承是没有问题的，但是由于抽象化角色和具体化角色需要独立变化，设计要求需要独立管理这两者。


JDK里的应用：

AWT (提供了抽象层映射于实际的操作系统)
JDBC
