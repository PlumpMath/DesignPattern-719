                                                                                                                                        设计模式入门
													   
设计模式实际上是经验的复用。

在软件开发中，一直伴随的那个不变的真理是：变化。不管当初软件设计的多好，一段时间之后，总是需要成长与改变，否则软件就会死亡。

设计原则

1，找出应用中可能需要变化之处，把它们独立出来，不要和那些不需要变化的代码混在一起。
如果每次新的需求一来，都会使某方面的代码发生变化，那么就可以确定，这部分的代码需要被抽出来，和其他稳定的代码有所区分。
把会变化的部分取出并封装起来，以便以后可以轻易的改动或扩充此部分，而不影响不需要变化的其他部分。
这个概念是几乎每个设计模式的背后的精神所在，所有的模式都提供了一套方法让“系统中的某部分改变不会影响其他部分”。

2，多用组合，少用继承。
继承属于扩展形式之一，但不是达到弹性设计的最佳方式。
利用继承设计子类的行为，是在编译时静态决定的，而且所有的子类都会继承到相同的行为。
然而，如果利用组合扩展对象的行为，就可以在运行时动态的进行扩展。

3，针对接口编程，而不是针对实现编程。
某个类，其行为来自超类的具体实现，或是实现了某个接口并自行实现其方法。这两种做法都是依赖于实现，我们被实现绑得死死的，没办法更改行为。
针对接口编程，关键就在多态。利用多态，程序可以针对超类型编程执行时会根据实际状况执行到真正的行为，不会被绑死在超类型的行为上。
针对超类型编程这句话，可以更明确的说成“变量的声明类型应该是超类型，通常是一个抽象类或者是一个接口，
如此，只要是具体实现此超类型的类所产生的对象，都可以指定给这个变量。
这也意味着，声明类时不用理会以后执行时的真正对象类型。”如下代码：

针对实现编程：
Dog dog = new Dog();
dog.bark();

针对接口编程：
Animal animal = new Dog();
animal.makeSound();

4，为了交互对象之间的松耦合设计而努力。
松耦合的设计之所以能让我们建立有弹性的OO系统，能够应对变化，是因为对象之间的相互依赖降到了最低。

5，对扩展开放，对修改关闭。
有了正确的代码，还解决了所有的bug，所以不能修改现有代码，必须关闭代码以防止被修改。
目标是允许类容易扩展，在不修改现有代码的情况下，就可搭配新的行为。
这样的设计具有弹性可以应对改变，可以接受新的功能来应对改变的需求。
通过动态的组合对象，可以写新的代码添加新功能，而无须修改现有代码。
把设计的每个部分都设计成同时具备开放性和关闭性是不可能的。遵循开闭原则通常会引入新的抽象层次，
增加代码的复杂度。只需要把注意力集中在设计中最有可能改变的地方应用开闭原则即可。














