                                                                                       序列键生成器的需求和设计

序列键被用来当作数据库中数据的主键使用，所以必须保证数据库惟一性，序列键需要由数据库操作来提供。

这里有两种序列键生成机制：

1，预定式存储

为保证在任何情况下键值都不会出现重复，应当使用预定式键值存储方法。
在请求一个键值时，首先将数据库中的键值更新为下一个可用值，然后将旧值提供给客户端。
这样万一出现运行中断的话，最多就是这个键值被浪费掉。

2，记录式存储

键值首先被返还给客户端，然后记录到数据库中去。这样做的缺点是：
一旦系统中断，就有可能出现客户端已经使用了一个键值，而这个键值却没有来得及存储到数据库中的情况。
在系统重启之后，系统还会从这个已经使用过的键值开始，从而导致重复错误。


上面讨论了序列键的存储机制，另一个汇总要的机制是键的查询机制。与其将键值的查询工作交给各个模块，不如将之集中到一个对象身上。
这个对象负责管理序列键的查询，称之为序列键管理器。并且整个系统只需要一个序列键管理器对象。
由于系统运行期间总是需要序列键，因此序列键管理器对象需要在系统运行期间存在。
考虑到可以让一个序列键管理器负责管理分属于不同模块的多个序列键，因此序列键管理器需要让整个系统访问。
所以，这个原始需求可以使用单例模式来实现序列键管理器。