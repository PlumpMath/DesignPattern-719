每一个模式描述了一个在我们周围不断重复发生的问题，以及该问题的解决方案的核心。
这样，你就能一次又一次地使用该方案而不必做重复劳动。

模式依据其目的可分为创建型、结构型、行为型。
创建型模式与对象的创建有关；结构型模式处理类或对象的组合；行为型模式对类或对象怎样交互和怎样分配职责进行描述。
模式依据其范围可以分为类模式和对象模式。
类模式处理类和子类之间的关系，这些关系通过继承建立，是静态的，在编译时刻便确定下来了。
对象模式处理对象间的关系，这些关系在运行时刻是可以变化的，是动态的。

对象的接口是指它所定义的所有的方法签名式(signature:包括方法名、返回类型和参数列)，它描述了该对象所能接受的全部请求的集合，任何匹配对象接口中签名式的请求都可以发送给该对象。
抽象类的主要目的是为它的子类定义公共接口。
对象的类(class)和对象的类型(type)是有差别的：
一个对象的类定义了对象是怎样实现的，同时也定义了对象的内部状态和操作的实现；但是对象的类型只与它的接口有关，接口即对象能相应的请求的集合。一个对象可以有多个类型，不同类的对象可以有相同的类型。类定义了对象所能执行的操作，也定义了对象的类型，一个对象是一个类的实例即指该对象支持类所定义的接口。

一个设计模式只有当它提供的灵活性是真正需要的时候，才有必要使用。
复用的关键在于对新需求和已有需求发生变化时的预见性，要求你的系统设计能相应地改进。所以在必须考虑系统在它的生命周期内会发生怎样的变化。
可复用的面向对象设计的原则：
1，针对接口编程，而不是针对实现编程(不将变量声明为某个特定的具体类的实例对象，而是让它遵从抽象类所定义的接口)
2，优先使用对象组合，而不是类继承(最好只继承抽象基类)，对象组合的设计具有更好的复用性。

MVC中的设计模式
MVC包括三类对象。模型Model是应用对象，视图View是它在屏幕上的表示，控制器Controller定义用户界面对用户输入的响应方式。
Model是代表组件状态和低级行为的部分，它管理着自己的状态并且处理所有对状态的操作，model自己本身并不知道使用自己的view和controller是谁，系统维护着它和view之间的关系，当model发生了改变系统还负责通知相应的view。
View代表了管理model所含有的数据的一个视觉上的呈现。一个Model可以有一个以上的View,但是Swing中却很少有这样的情况。
Controller管理着model和用户之间的交互的控制。它提供了一些方法去处理当model的状态发生了变化时的情况。
视图必须保证它的显示正确的反映了模型的状态。一旦模型的数据发生变化，模型将通知有关视图，每个视图都相应地得到刷新自己的机会。

动态绑定：是指发送的请求直到运行时刻才受你的具体的实现的约束。因此，在知道任何有正确接口的对象都将接受此请求时，可以写一个一般的程序，它期待着那些具有该特定接口的对象。

在用对象建模时可以用两种方式连接对象：
1，关联：是一种弱连接，对象可以是小组或家庭的一部分，但它们不完全相互依赖。例如汽车和乘客。
2，聚合：表示把对象放在一起，变成一个更大的对象，形成一个"部分-整体"层次结构，它隐含了较大的依赖性，至少是整体对部分的依赖。例如房子和门窗。


框架(Framework)是构成一类特定软件可复用设计的一组相互协作的类，必须尽可能地灵活，可扩充。
1，框架规定了你的应用的体系结构，定义了整体结构，类和对象的分割，各部分的主要责任，类和对象怎么协作，以及控制流程。
2，框架预定义了这些设计参数，以便于应用设计者或实现者能集中精力于应用本身的特定细节。
3，框架记录了其应用领域的共同的设计决策，因而框架更强调设计复用，尽管框架常包括集体的以及可用的子类。

设计模式和框架的区别：
1，设计模式比框架更抽象
框架能够用代码表示，而设计模式只有其特例才能表示为代码。
框架能够使用程序设计语言写出来，不仅能被学习，也能被直接执行和复用。而设计模式在每一次被复用时，都需要被实现。
2，设计模式是比框架更小的体系结构元素：一个典型的框架包括了多个设计模式，而反之绝非如此
3，框架比设计模式更加特例化，框架总是针对一个特定的应用领域。


