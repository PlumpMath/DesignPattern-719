                                                                                                               装饰者模式
													   
装饰者模式动态的将责任附加到对象上，若要扩展功能，装饰者提供了比继承更有弹性的替代方案。

1，装饰者和被装饰对象有相同的超类型。
这是为了利用继承达到类型匹配，而不是为了获得行为。
2，可以用一个或多个装饰者包装一个对象。
3，在任何需要原始对象的场合，都可以用装饰过的对象代替它。
4，装饰者可以在所委托被装饰者的行为之前或者之后，加上自己的行为，甚至将被装饰者的行为整个取代掉，而达到特定的目的。
5，对象可以在任何时候被装饰，所以可以在运行时动态的、不限量的用你喜欢的装饰者来装饰对象。
6，装饰者一般对组件的客户是透明的，除非客户程序依赖于组件的具体类型。
7，装饰者模式会导致设计中出现许多小对象，如果过度使用，会让程序变得更复杂。
